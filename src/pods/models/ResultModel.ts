import { updater } from "../../utils/ObjectUpdater";
import { IUpdateable } from "../system/interfaces";

export default class ResultModel implements IUpdateable<ResultModel> {
  public active!: boolean;
  public antiWhale!: any;
  public aprDaily!: number;
  public aprWeekly!: number;
  public aprYearly!: number;
  public apyYearly!: number;
  public asset!: string;
  public assetAddress!: any;
  public assetId!: string;
  public assetLockup!: boolean;
  public assetPopupMessage!: any;
  public assetPrice!: number;
  public auditInfo!: any;
  public blockchain!: string;
  public category!: any;
  public collateralLockPeriod!: any;
  public d_active_reason!: any;
  public dateAdded!: string;
  public dateEnding!: any;
  public dateStarted!: any;
  public dateUpdated!: string;
  public daysRemaining!: any;
  public depositFee!: any;
  public exchangeName!: any;
  public exchangePicture!: any;
  public exchangeUrl!: any;
  public exchangeVersion!: any;
  public farm!: string;
  public farmId!: string;
  public farmImage!: any;
  public farmName!: string;
  public farmType!: any;
  public feeAprYearly!: number;
  public harvestLockup!: any;
  public harvestLockupInfo!: any;
  public impermanentLoss!: any;
  public impermanentLoss30d!: any;
  public info!: any;
  public investmentLink!: any;
  public manuallyCalculatedAPR!: boolean;
  public maxPoolCap!: any;
  public multiplier!: any;
  public nativeToken!: any;
  public nativeTokenAddress!: any;
  public nativeTokenInvestLink!: any;
  public nativeTokenMarketCap!: number;
  public nativeTokenPrice!: number;
  public new_asset!: boolean;
  public otherFees!: any;
  public otherPoolEconomicsInfo!: any;
  public pid!: number;
  public poolAlreadyFilled!: boolean;
  public priceCorrelation_30d!: any;
  public rewardTokenA!: any;
  public rewardTokenAAddress!: any;
  public rewardTokenAAprYearly!: number;
  public rewardTokenAAprYearlyMaxBoosted!: number;
  public rewardTokenAPrice!: number;
  public rewardTokenAWeeklyAmount!: number;
  public rewardTokenAWeeklyDollarAmount!: number;
  public rewardTokenB!: any;
  public rewardTokenBAddress!: any;
  public rewardTokenBAprYearly!: number;
  public rewardTokenBAprYearlyMaxBoosted!: number;
  public rewardTokenBPrice!: number;
  public rewardTokenBWeeklyAmount!: number;
  public rewardTokenBWeeklyDollarAmount!: number;
  public scam!: boolean;
  public scamInfo!: any;
  public selected_farm!: any[];
  public stakingAddress!: any;
  public stakingLink!: string;
  public status!: string;
  public tokenA!: any;
  public tokenAAddress!: any;
  public tokenABacking!: number;
  public tokenAHolders!: number;
  public tokenAHoldersHistory!: any[];
  public tokenAPicture!: any;
  public tokenAPrice!: number;
  public tokenAPriceHistory!: any[];
  public tokenB!: any;
  public tokenBAddress!: any;
  public tokenBBacking!: number;
  public tokenBHolders!: number;
  public tokenBPicture!: any;
  public tokenBPrice!: number;
  public tokenC!: any;
  public tokenCAddress!: any;
  public tokenCBacking!: number;
  public tokenCHolders!: number;
  public tokenCPicture!: any;
  public tokenCPrice!: number;
  public tokenD!: any;
  public tokenDAddress!: any;
  public tokenDBacking!: number;
  public tokenDHolders!: number;
  public tokenDPicture!: any;
  public tokenDPrice!: number;
  public tokenE!: any;
  public tokenEAddress!: any;
  public tokenEBacking!: number;
  public tokenEHolders!: number;
  public tokenEPicture!: any;
  public tokenEPrice!: number;
  public transferTax!: any;
  public transferTaxInfo!: any;
  public tvlChange24h!: string;
  public tvlChange24hValue!: number;
  public tvlExchange!: number;
  public tvlFarm!: number;
  public tvlStaked!: number;
  public underlyingFarm!: any;
  public url!: any;
  public vaultAddress!: any;
  public volume_24h!: any;
  public weight!: any;
  public withdrawalFee!: any;
  public yearlyTokenRewardPool!: number;
  public yieldType!: string;

  constructor(args?: Partial<ResultModel>) {
    Object.assign(this, args);
  }

  public update(obj: Partial<ResultModel>): ResultModel {
    return updater.update(this, obj);
  }
}
